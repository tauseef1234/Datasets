question,cypher
What is the email address of the customer with customer ID 101?,"
     MATCH (c:Customer {id: 101}) 
     RETURN c.email
     "
Find all customers living in California.,"
     MATCH (c:Customer) 
     WHERE c.state = 'CA' 
     RETURN c.name
     "
What is the full address of Bob Johnson?,"
     MATCH (c:Customer {customer_name: 'Bob Johnson'}) 
     RETURN c.address, c.city, c.state, c.zip, c.country
     "
List all customer IDs and their corresponding names.,"
     MATCH (c:Customer) 
     RETURN c.id, c.name
     "
What is the loan amount for loan number M001?,"
     MATCH (l:Loan {loan_number: 'M001'}) 
     RETURN l.loan_amount
     "
What is the tenure for loan M002?,"
     MATCH (l:Loan {loan_number: 'M002'}) 
     RETURN l.tenure
     "
Find loans with an interest rate greater than 3.8%.,"
     MATCH (l:Loan) 
     WHERE toFloat(replace(l.interest_rate, '%', '')) > 3.8 
     RETURN l.loan_number, l.interest_rate
     "
What are the loan amounts for all loans held by Alice Smith?,"
      MATCH (c:Customer {customer_name: 'Alice Smith'})-[:HAS_LOAN]->(l:Loan) 
      RETURN l.loan_number, l.loan_amount
      "
Which customer has loan M006?,"
      MATCH (c:Customer)-[:HAS_LOAN]->(l:Loan {loan_number: 'M006'}) 
      RETURN c.customer_name
      "
List all loans with an interest rate greater than 4.0% and the customer associated with them.,"
      MATCH (c:Customer)-[:HAS_LOAN]->(l:Loan) 
      WHERE toFloat(replace(l.interest_rate, '%', '')) > 4.0 
      RETURN c.customer_name, l.loan_number, l.interest_rate
      "
How many active 'Adjustable-Rate' loans are held by customers in New York?,"
      MATCH (c:Customer) WHERE c.state = 'NY' MATCH (c)-[:HAS_LOAN]->(l:Loan) 
      WHERE l.loan_type = 'Adjustable-Rate' AND l.status = 'Active' 
      RETURN count(l) AS ny_adjustable_active_loans
      "
What is the total outstanding late fees for Alice Smith?,"
      MATCH (c:customer)-[:HAS_MORTGAGE]->(m:mortgage)-[:HAS_SCHEDULED_PAYMENT]->(pd:payments_due)-[:MAY_RESULT_IN]->(f:fee) 
      WHERE c.customer_name = 'Alice Smith' AND f.fee_type = 'Late Fee' AND f.status = 'Due' 
      RETURN SUM(f.amount) AS TotalOutstandingLateFees
      "
List all scheduled payments for Bob Johnson.,"
      MATCH (c:customer)-[:HAS_MORTGAGE]->(m:mortgage)-[:HAS_SCHEDULED_PAYMENT]->(pd:payments_due) 
      WHERE c.customer_name = 'Bob Johnson' 
      RETURN pd.payment_due_id, pd.amount, pd.due_date, pd.status
      "
Has Charlie Brown paid his late fee incurred on 2025-06-16?,"
     MATCH (c:customer)-[:OWES]->(f:fee) 
     WHERE c.customer_name = 'Charlie Brown' AND f.fee_type = 'Late Fee' AND f.date_incurred = '2025-05-16' 
     RETURN f.status
     "
What is the interest rate on Diana Prince's mortgage?,"
     MATCH (c:customer)-[:HAS_MORTGAGE]->(m:mortgage) 
     WHERE c.customer_name = 'Diana Prince' 
     RETURN m.interest_rate
     "
Show me all payments made by Ethan Hunt.,"
     MATCH (c:customer)-[:HAS_MADE]->(pm:payments_made) 
     WHERE c.customer_name = 'Ethan Hunt' 
     RETURN pm.payment_made_id, pm.amount, pm.payment_date
     "
Find the due date for payment PD006.,"
     MATCH (pd:payments_due) 
     WHERE pd.payment_due_id = 'PD006' 
     RETURN pd.due_date
     "
Which mortgage is fee F004 associated with?,"
     MATCH (f:fee)-[:OWES]->(c:customer)-[:HAS_MORTGAGE]->(m:mortgage) 
     WHERE f.fee_id = 'F004' RETURN m.loan_number
     "
What is the status of payment PD007?,"
     MATCH (pd:payments_due) 
     WHERE pd.payment_due_id = 'PD007' 
     RETURN pd.status
     "
How many active mortgages does Alice Smith have?,"
     MATCH (c:customer)-[:HAS_MORTGAGE]->(m:mortgage) 
     WHERE c.customer_name = 'Alice Smith' AND m.status = 'Active' 
     RETURN COUNT(m) AS ActiveMortgagesCount
     "
What is the loan amount for mortgage M005?,"
     MATCH (m:mortgage) 
     WHERE m.loan_number = 'M005' 
     RETURN m.loan_amount
     "
Which mortgages are under bankruptcy?," 
     MATCH (m:Mortgage)-[:IS_UNDER_BANKRUPTCY]->(b:Bankruptcy) 
     RETURN m.loan_number AS loan_number, 
            m.amount AS loan_amount, 
            b.status AS bankruptcy_status, 
            b.filing_date AS filing_date,
            b.close_date AS close_date 
     "
What is the last payment date or end payment date for mortgage M003?,"
     MATCH (p:Payment)-[:BELONGS_TO]->(l:Loan {loan_number: 'M003'})
     RETURN l.loan_number AS mortgage_id,
            MAX(p.due_date) AS last_payment_date
     "
What is the latest payment due date (the earliest upcoming 'Scheduled' payment) for each mortgage?,"
     MATCH (p:Payment)-[:BELONGS_TO]->(l:Loan)
     WHERE p.status = 'Scheduled'
     WITH l.loan_number AS mortgage_id, MIN(p.due_date) AS latest_due_date
     RETURN mortgage_id, latest_due_date
     ORDER BY latest_due_date ASC
     "
What is the new amortization payment schedule for mortgage M005 if the customer starts paying $100 more per month from June 2025?,"
     MATCH (l:Loan {loan_number: 'M005'})-[:HAS_PAYMENT]->(p:Payment)
     WITH l, p
     WHERE date(p.due_date) >= date('2025-06-01')
     WITH l, p,
     (p.amount + 100) AS new_payment_amount
     // Calculate new remaining balance after each increased payment
     WITH l, p, new_payment_amount,
     collect({
     due_date: p.due_date,
     original_amount: p.amount,
     new_amount: new_payment_amount
     }) AS updated_payments
     // Estimate new amortization end date based on adjusted payments
     WITH l,
     reduce(total = 0, payment IN updated_payments | total + payment.new_amount) AS total_paid,
     l.loan_amount AS original_balance,
     l.interest_rate AS rate,
     l.tenure AS tenure
     RETURN l.loan_number AS mortgage_id,
     l.customer_id AS customer,
     date('2025-06-01') AS new_payment_start_date,
     round(l.loan_amount - total_paid, 2) AS remaining_balance_estimate,
     (date(l.start_date) + duration({months: l.tenure * 12 - floor(total_paid / (p.amount + 100))})) AS estimated_new_end_date,
     updated_payments AS adjusted_schedule
     "
List all the late fees charged on mortgage M005,"
     MATCH (l:Loan {loan_number: 'M005'})<-[:APPLIES_TO]-(f:LateFee)
     RETURN
     f.fee_id AS fee_id,
     f.customer_id AS customer_id,
     l.loan_number AS mortgage_id,
     f.fee_type AS fee_type,
     f.amount AS amount,
     f.date_incurred AS date_incurred,
     f.status AS status
     ORDER BY f.date_incurred ASC
     "
